<?php

require_once 'test/TestCaseExtension.php';
require_once 'application/SplClassLoader.php';
$loader = new SplClassLoader('UnityCrash', 'application/lib/vendors');
$loader->register();

use UnityCrash\Data\Post;

class PostTest extends TestCaseExtension
{

	/** インスタンスと紐づけられるキー。 */
	const INSTANCE = 'instance';

	/** ソースと紐づけられるキー。 */
	const SOURCE = 'source';

	/** 結果と紐づけられるキー。 */
	const GOT = 'got';

	/** Constructor. */
	public function __construct()
	{
		parent::__construct();
		$this->givenTable['インスタンスを生成する'] = array($this, 'createInstance');
		$this->givenTable['メッセージを指定してインスタンスを生成する'] = array($this, 'createInstanceWithMessage');
		$this->givenTable['ソースを設定する'] = array($this, 'setSource');
		$this->whenTable['メッセージを追記する'] = array($this, 'addMessage');
		$this->whenTable['メッセージを強制フラグを指定して追記する'] = array($this, 'forceAddMessage');
		$this->whenTable['指定文字数に短縮する'] = array($this, 'omit');
		$this->whenTable['制限文字数が短縮記号より短い場合、例外を起こす'] = array($this, 'omitTooShort');
		$this->thenTable['現在のメッセージが正しい'] = array($this, 'validateMessage');
		$this->thenTable['結果が正しい'] = array($this, 'validateResult');
	}

	/** @scenario インスタンスを生成できる */
	public function shouldCreateInstance()
	{
		$this
			->given('インスタンスを生成する')
			->then('現在のメッセージが正しい', '');
	}

	/** @scenario null を指定してインスタンスを生成できる */
	public function shouldCreateInstanceWithNull()
	{
		$this
			->given('メッセージを指定してインスタンスを生成する', null)
			->then('現在のメッセージが正しい', '');
	}

	/** @scenario 空文字を指定してインスタンスを生成できる */
	public function shouldCreateInstanceWithEmpty()
	{
		$this
			->given('メッセージを指定してインスタンスを生成する', '')
			->then('現在のメッセージが正しい', '');
	}

	/** @scenario メッセージを指定してインスタンスを生成できる */
	public function shouldCreateInstanceWithMessgae()
	{
		$message1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０';
		$this
			->given('メッセージを指定してインスタンスを生成する', $message1)
			->then('現在のメッセージが正しい', $message1);
		$this
			->given('メッセージを指定してインスタンスを生成する', $message2)
			->then('現在のメッセージが正しい', $message2);
	}

	/** @scenario 文字制限数を超えたメッセージを指定してインスタンスを生成できる */
	public function shouldCreateInstanceWithOverMessgae()
	{
		$message1 = '123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901';
		$expect1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567...';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１';
		$expect2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７...';
		$this
			->given('メッセージを指定してインスタンスを生成する', $message1)
			->then('現在のメッセージが正しい', $expect1);
		$this
			->given('メッセージを指定してインスタンスを生成する', $message2)
			->then('現在のメッセージが正しい', $expect2);
	}

	/** @scenario メッセージを後から追加できる */
	public function shouldAddMessage()
	{
		$message1 = '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890';
		$add1 = '123456789';
		$expect1 = '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 123456789';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０';
		$add2 = '１２３４５６７８９';
		$expect2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０ １２３４５６７８９';
		$this
			->given('メッセージを指定してインスタンスを生成する', $message1)
			->when('メッセージを追記する', $add1)
			->then('現在のメッセージが正しい', $expect1);
		$this
			->given('メッセージを指定してインスタンスを生成する', $message2)
			->when('メッセージを追記する', $add2)
			->then('現在のメッセージが正しい', $expect2);
	}

	/** @scenario 文字制限数を超えたメッセージを後から追加できる */
	public function shouldAddOverMessage_Case1()
	{
		$message1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901';
		$add1 = '1234567890';
		$expect1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901 12345...';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１';
		$add2 = '１２３４５６７８９０';
		$expect2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１ １２３４５...';
		$this
			->given('メッセージを指定してインスタンスを生成する', $message1)
			->when('メッセージを追記する', $add1)
			->then('現在のメッセージが正しい', $expect1);
		$this
			->given('メッセージを指定してインスタンスを生成する', $message2)
			->when('メッセージを追記する', $add2)
			->then('現在のメッセージが正しい', $expect2);
	}

	/** @scenario 文字制限数を超えたメッセージを後から追加できる */
	public function shouldAddOverMessage_Case2()
	{
		$message1 = '123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901';
		$add1 = '1234567890';
		$expect1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567...';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１';
		$add2 = '１２３４５６７８９０';
		$expect2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７...';
		$this
			->given('メッセージを指定してインスタンスを生成する', $message1)
			->when('メッセージを追記する', $add1)
			->then('現在のメッセージが正しい', $expect1);
		$this
			->given('メッセージを指定してインスタンスを生成する', $message2)
			->when('メッセージを追記する', $add2)
			->then('現在のメッセージが正しい', $expect2);
	}

	/** @scenario 文字制限数を超えたメッセージを後から追加できる */
	public function shouldAddOverMessage_Case3()
	{
		$message1 = '123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901';
		$expect1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567...';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１';
		$expect2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７...';
		$this
			->given('インスタンスを生成する')
			->when('メッセージを追記する', $message1)
			->then('現在のメッセージが正しい', $expect1);
		$this
			->given('インスタンスを生成する')
			->when('メッセージを追記する', $message2)
			->then('現在のメッセージが正しい', $expect2);
	}

	/** @scenario メッセージを強制フラグ OFF で後から追加できる */
	public function shouldAddMessageWithNoForce()
	{
		$message1 = '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890';
		$add1 = '123456789';
		$expect1 = '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 123456789';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０';
		$add2 = '１２３４５６７８９';
		$expect2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０ １２３４５６７８９';
		$this
			->given('メッセージを指定してインスタンスを生成する', $message1)
			->when('メッセージを強制フラグを指定して追記する', $add1, false)
			->then('現在のメッセージが正しい', $expect1);
		$this
			->given('メッセージを指定してインスタンスを生成する', $message2)
			->when('メッセージを強制フラグを指定して追記する', $add2, false)
			->then('現在のメッセージが正しい', $expect2);
	}

	/** @scenario 文字制限数を超えたメッセージを強制フラグ OFF で後から追加できる */
	public function shouldAddOverMessageWithNoForce_Case1()
	{
		$message1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901';
		$add1 = '1234567890';
		$expect1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901 12345...';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１';
		$add2 = '１２３４５６７８９０';
		$expect2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１ １２３４５...';
		$this
			->given('メッセージを指定してインスタンスを生成する', $message1)
			->when('メッセージを強制フラグを指定して追記する', $add1, false)
			->then('現在のメッセージが正しい', $expect1);
		$this
			->given('メッセージを指定してインスタンスを生成する', $message2)
			->when('メッセージを強制フラグを指定して追記する', $add2, false)
			->then('現在のメッセージが正しい', $expect2);
	}

	/** @scenario 文字制限数を超えたメッセージを強制フラグ OFF で後から追加できる */
	public function shouldAddOverMessageWithNoForce_Case2()
	{
		$message1 = '123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901';
		$add1 = '1234567890';
		$expect1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567...';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１';
		$add2 = '１２３４５６７８９０';
		$expect2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７...';
		$this
			->given('メッセージを指定してインスタンスを生成する', $message1)
			->when('メッセージを強制フラグを指定して追記する', $add1, false)
			->then('現在のメッセージが正しい', $expect1);
		$this
			->given('メッセージを指定してインスタンスを生成する', $message2)
			->when('メッセージを強制フラグを指定して追記する', $add2, false)
			->then('現在のメッセージが正しい', $expect2);
	}

	/** @scenario 文字制限数を超えたメッセージを強制フラグ OFF で後から追加できる */
	public function shouldAddOverMessageWithNoForce_Case3()
	{
		$message1 = '123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901';
		$expect1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567...';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１';
		$expect2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７...';
		$this
			->given('インスタンスを生成する')
			->when('メッセージを強制フラグを指定して追記する', $message1, false)
			->then('現在のメッセージが正しい', $expect1);
		$this
			->given('インスタンスを生成する')
			->when('メッセージを強制フラグを指定して追記する', $message2, false)
			->then('現在のメッセージが正しい', $expect2);
	}

	/** @scenario メッセージを強制フラグ ON で後から追加できる */
	public function shouldAddMessageWithForce()
	{
		$message1 = '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890';
		$add1 = '1234567890';
		$expect1 = 	'1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 1234567890';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０';
		$add2 = '１２３４５６７８９０';
		$this
			->given('メッセージを指定してインスタンスを生成する', $message1)
			->when('メッセージを強制フラグを指定して追記する', $add1, true)
			->then('現在のメッセージが正しい', $message1);
		$this
			->given('メッセージを指定してインスタンスを生成する', $message2)
			->when('メッセージを強制フラグを指定して追記する', $add2, true)
			->then('現在のメッセージが正しい', $message2);
	}

	/** @scenario 文字制限数を超えたメッセージを強制フラグ OFF で後から追加できる */
	public function shouldAddOverMessageWithForce_Case1()
	{
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０';

		$message1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901';
		$add1 = '1234567890';
		$expect1 = '123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456... 1234567890';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１';
		$add2 = '１２３４５６７８９０';
		$expect2 =  '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６... １２３４５６７８９０';
		$this
			->given('メッセージを指定してインスタンスを生成する', $message1)
			->when('メッセージを強制フラグを指定して追記する', $add1, true)
			->then('現在のメッセージが正しい', $expect1);
		$this
			->given('メッセージを指定してインスタンスを生成する', $message2)
			->when('メッセージを強制フラグを指定して追記する', $add2, true)
			->then('現在のメッセージが正しい', $expect2);
	}

	/** @scenario 文字制限数を超えたメッセージを強制フラグ OFF で後から追加できる */
	public function shouldAddOverMessageWithForce_Case2()
	{
		$message1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890';
		$expect1 = '1... 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012...';
		$message2 = '１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０';
		$expect2 =  '１... １２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２...';
		$this
			->given('メッセージを指定してインスタンスを生成する', $message1)
			->when('メッセージを強制フラグを指定して追記する', $message1, true)
			->then('現在のメッセージが正しい', $expect1);
		$this
			->given('メッセージを指定してインスタンスを生成する', $message1)
			->when('メッセージを強制フラグを指定して追記する', $message2, true)
			->then('現在のメッセージが正しい', $expect2);
	}

	/** @scenario 文字列を短縮できるが、 null である場合は空文字を返す */
	public function shouldOmitNoActionIfNull()
	{
		$this
			->given('ソースを設定する', null)
			->when('指定文字数に短縮する', 10)
			->then('結果が正しい', '');
	}

	/** @scenario 文字列を短縮するが、空文字である場合は何もしない */
	public function shouldOmitNoActionIfEmpty()
	{
		$this
			->given('ソースを設定する', '')
			->when('指定文字数に短縮する', 10)
			->then('結果が正しい', '');
	}

	/** @scenario 文字列を短縮できるが、文字数が制限内である場合は何もしない */
	public function shouldOmitNoActionIfEnough()
	{
		$source1 = '1234567890';
		$source2 = '１２３４５６７８９０';
		$this
			->given('ソースを設定する', $source1)
			->when('指定文字数に短縮する', 10)
			->then('結果が正しい', $source1);
		$this
			->given('ソースを設定する', $source2)
			->when('指定文字数に短縮する', 10)
			->then('結果が正しい', $source2);
	}

	/** @scenario 文字列を短縮できる */
	public function shouldOmit()
	{
		$source1 = '12345678901';
		$source2 = '１２３４５６７８９０１';
		$this
			->given('ソースを設定する', $source1)
			->when('指定文字数に短縮する', 10)
			->then('結果が正しい', '1234567...');
		$this
			->given('ソースを設定する', $source1)
			->when('指定文字数に短縮する', 4)
			->then('結果が正しい', '1...');
		$this
			->given('ソースを設定する', $source1)
			->when('指定文字数に短縮する', 3)
			->then('結果が正しい', '...');
		$this
			->given('ソースを設定する', $source2)
			->when('指定文字数に短縮する', 10)
			->then('結果が正しい', '１２３４５６７...');
		$this
			->given('ソースを設定する', $source2)
			->when('指定文字数に短縮する', 4)
			->then('結果が正しい', '１...');
		$this
			->given('ソースを設定する', $source2)
			->when('指定文字数に短縮する', 3)
			->then('結果が正しい', '...');
	}

	/** @scenario 文字列を短縮するにあたり、制限文字数が短縮記号より短い場合、例外を起こす */
	public function shouldNotOmitIfTooShort()
	{
		$this
			->given('ソースを設定する', '')
			->when('制限文字数が短縮記号より短い場合、例外を起こす');
	}
	
	////////////////////////////////////////////////////////
	
	/** インスタンスを生成する */
	protected function createInstance(array & $world, array $arguments)
	{
		$world[self::INSTANCE] = new Post();
	}

	/** メッセージを指定してインスタンスを生成する */
	protected function createInstanceWithMessage(array & $world, array $arguments)
	{
		$this->assertEquals(1, count($arguments), '必要な引数の数を満たしている');
		$world[self::INSTANCE] = new Post($arguments[0]);
	}

	/** ソースを設定する */
	protected function setSource(array & $world, array $arguments)
	{
		$this->assertEquals(1, count($arguments), '必要な引数の数を満たしている');
		$world[self::SOURCE] = $arguments[0];
	}

	/** メッセージを追記する */
	protected function addMessage(array & $world, array $arguments)
	{
		$this->assertEquals(1, count($arguments), '必要な引数の数を満たしている');
		$world[self::INSTANCE]->addMessage($arguments[0]);
	}

	/** メッセージを強制フラグを指定して追記する */
	protected function forceAddMessage(array & $world, array $arguments)
	{
		$this->assertEquals(2, count($arguments), '必要な引数の数を満たしている');
		$world[self::INSTANCE]->addMessage($arguments[0], $arguments[1]);
	}

	/** 指定文字数に短縮する */
	protected function omit(array & $world, array $arguments)
	{
		$this->assertEquals(1, count($arguments), '必要な引数の数を満たしている');
		$world[self::GOT] = Post::omit($world[self::SOURCE], $arguments[0]);
	}

	/** 制限文字数が短縮記号より短い場合、例外を起こす */
	protected function omitTooShort(array & $world, array $arguments)
	{
		$source = $world[self::SOURCE];
		$callback = function () use ($source) { Post::omit($source, 2); };
		$this->assertException($callback, 'InvalidArgumentException', 'Character limit is too short.');
	}

	/** 現在のメッセージが正しい */
	protected function validateMessage(array & $world, array $arguments)
	{
		$this->assertEquals(1, count($arguments), '必要な引数の数を満たしている');
		$this->assertEquals($arguments[0], $world[self::INSTANCE]->getMessage(), '現在のメッセージが正しい');
	}

	/** 結果が正しい */
	protected function validateResult(array & $world, array $arguments)
	{
		$this->assertEquals(1, count($arguments), '必要な引数の数を満たしている');
		$this->assertEquals($arguments[0], $world[self::GOT], '結果が正しい');
	}
}
